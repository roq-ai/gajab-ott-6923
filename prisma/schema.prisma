generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model content {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String      @db.VarChar(255)
  description String?     @db.VarChar(255)
  category    String      @db.VarChar(255)
  url         String      @db.VarChar(255)
  provider_id String      @db.Uuid
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  updated_at  DateTime    @default(now()) @db.Timestamp(6)
  provider    provider    @relation(fields: [provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  review      review[]
  watchlist   watchlist[]
}

model promotion {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String   @db.VarChar(255)
  description String?  @db.VarChar(255)
  image       String?  @db.VarChar(255)
  provider_id String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  provider    provider @relation(fields: [provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model provider {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?      @db.VarChar(255)
  image       String?      @db.VarChar(255)
  name        String       @db.VarChar(255)
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  user_id     String       @db.Uuid
  tenant_id   String       @db.VarChar(255)
  content     content[]
  promotion   promotion[]
  user        user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subscriber  subscriber[]
}

model review {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rating        Int
  comment       String?    @db.VarChar(255)
  subscriber_id String     @db.Uuid
  content_id    String     @db.Uuid
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @db.Timestamp(6)
  content       content    @relation(fields: [content_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subscriber    subscriber @relation(fields: [subscriber_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model subscriber {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String      @db.Uuid
  provider_id String      @db.Uuid
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  updated_at  DateTime    @default(now()) @db.Timestamp(6)
  review      review[]
  provider    provider    @relation(fields: [provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        user        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  watchlist   watchlist[]
}

model user {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String       @unique @db.VarChar(255)
  firstName   String?      @db.VarChar(255)
  lastName    String?      @db.VarChar(255)
  roq_user_id String       @db.VarChar(255)
  tenant_id   String       @db.VarChar(255)
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  provider    provider[]
  subscriber  subscriber[]
}

model watchlist {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subscriber_id String     @db.Uuid
  content_id    String     @db.Uuid
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @db.Timestamp(6)
  content       content    @relation(fields: [content_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subscriber    subscriber @relation(fields: [subscriber_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
